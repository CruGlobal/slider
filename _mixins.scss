/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all. 
 */




/**
 * Quickly generate a font-size in rems, with a pixel fallback, based on the
 * value we pass into the mixin, e.g.:
 *
 * h1 {
 *     @include font-size(24px);
 * }
 */
@mixin font-size($font-size, $line-height: true) {
    font-size: $font-size;
    font-size: ($font-size / $base-font-size) * 1rem;

    @if $line-height == true {
        line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }

}


@mixin rem($prop, $sizeValue: 16){
	#{$prop}: ($sizeValue) + px;
	#{$prop}: ($sizeValue / 16) + rem;
}

/**
 * Box Sizing
 */
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
	  -ms-box-sizing: $boxmodel;
	   -o-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}




/**
 * Space elements by an amount based on your magic number. Pass in the property
 * to be indented as a paramater, e.g.:
 *
 * pre {
 *    @include spacing(padding-left);
 * }
 */
@mixin spacing($property) {
    #{$property}: $magic-number;
    #{$property}: $magic-ratio + rem;
}

@mixin double-spacing($property) {
    #{$property}: 2 * $magic-number;
    #{$property}: 2 * $magic-ratio + rem;
}

@mixin half-spacing($property) {
    #{$property}: $magic-number / 2;
    #{$property}: ($magic-ratio / 2) + rem;
}




/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
@mixin headings($from: 1, $to: 6){
    %base-heading {
        @content
    }

    @if $from >= 1 and $to <= 6{
        @for $i from $from through $to{
            h#{$i}{
                @extend %base-heading;
            }
        }
    }
}



/**
 * Media query for easy breakpoint. Use pixel width with or without units
 * and it will convert to em 
 */
$query-unit: 16px;

@mixin mq( $point, $query1: min, $query2: width, $IE9: false) {
    @if $IE9 == true{
        .lt-ie9 & {
            @content;
        }
        @media screen and (#{$query1}-#{$query2}: strip-units($point) / strip-units($query-unit) + em) {
            @content;
        }
    }

    @else {
        @media screen and (#{$query1}-#{$query2}: strip-units($point) / strip-units($query-unit) + em) {
            @content;
        }
    }
}


@mixin clearfix() {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }
  &:after {
    clear: both;
  }
}


/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

@mixin rem($property, $size-value){
	#{$property}: strip-units($size-value) * 1px;
	#{$property}: strip-units($size-value / $base-font-size) * 1rem;
}

@mixin em($property, $size-value){
	#{$property}: strip-units($size-value / 16 ) * 1em;
}


// Webkit-style focus
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}


// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select; // IE10+
       -o-user-select: $select;
          user-select: $select;
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: unquote("alpha(opacity=#{$opacity-ie})");
}



// Button variants
// -------------------------
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus,
  &:active,
  &.active,
  .open &.dropdown-toggle {
    color: $color;
    background-color: darken($background, 8%);
        border-color: darken($border, 12%);
  }
  &:active,
  &.active,
  .open &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: $background;
          border-color: $border
    }
  }
}

// Message variants
// -------------------------
// Easily pump out default styles for all messages
@mixin message-variant($color, $background) {
  color: $color;
  background-color: $background;
}





// Panels
// -------------------------
@mixin panel-variant($border, $bg-color) {
  border-color: $border;
  & > .panel-header {
    background-color: $bg-color;
    border-color: $border;
  }
  
  & > .panel-footer {
	  border-top-color: $bg-color;
  }
  
  
}



// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `$input-focus-border` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// Web-kit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.

@mixin form-control-focus($color: $input-border-focus) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);
  &:focus {
    border-color: $color;
    outline: 0;
    //@include box-shadow(unquote("inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px #{$color-rgba}"));
  }
}


// CSS3 PROPERTIES
// --------------------------------------------------

// Single side border-radius
@mixin border-top-radius($radius) {
  border-top-right-radius: $radius;
   border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
     border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
   border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
     border-top-left-radius: $radius;
}





/**
 * Writes the typical link, button in one go
 * Includes active and focus for accessibility 
 * 
 */

@mixin psuedo(){
	&:hover, &:focus, &:active{
		@content;
	}
}





/**
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
@mixin grid-media-query($media-query){
    $breakpoint-found: false;

    @each $breakpoint in $breakpoints{
        $name: nth($breakpoint, 1);
        $declaration: nth($breakpoint, 2);

        @if $media-query == $name and $declaration{
            $breakpoint-found: true;

            @media only screen and #{$declaration}{
                @content;
            }
        }
    }

    @if $breakpoint-found == false{
        @warn "Breakpoint ‘#{$media-query}’ does not exist";
    }
}





/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
@mixin silent-relative(){
    @if $use-silent-classes == true{
        position:relative;
    }
}


@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content; 
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  } 
}


/**
 *  Calculates any number of margins and paddings in one swoop
 * 
 * Running this is as easy 
 * @include vertical-calc(1, 12) {}
 *
 */
$base-vertical-grid: $magic-number / 4;

@mixin vertical-calc($from: 1, $to: 12, $grid: $base-vertical-grid){
    @if $from >= 1 and $to <= 12{
        @for $i from $from through $to{
            .mt#{$i}{
				margin-top: ($grid * $i);
				margin-top: ($grid * $i)/$rem-base + rem;
				@content
            }

			.mb#{$i}{
				margin-bottom: ($grid * $i);
				margin-bottom: ($grid * $i)/$rem-base + rem;
				@content
            }

			.mtb#{$i}{
				@extend .mt#{$i};
				@extend .mb#{$i};
			}
			
			.pt#{$i}{
				padding-top: ($grid * $i);
				padding-top: ($grid * $i)/$rem-base + rem;
				@content
            }

			.pb#{$i}{
				padding-bottom: ($grid * $i);
				padding-bottom: ($grid * $i)/$rem-base + rem;
				@content	
            }

			.ptb#{$i}{
				@extend .pt#{$i};
				@extend .pb#{$i};
			}
			
        }
    }
}

